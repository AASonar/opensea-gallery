import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import Script from "next/script";
import { NftCards } from "../components/ui";
import AddressForm from "../components/ui/addressForm";
import { NFTBaseContext } from "../components/contexts/NFTContext";
import { useContext, useState } from "react";
import {
  NFTBaseType,
  NFTDataType,
  NFTItemsType,
} from "../components/types/nftType";
import { AddressContext } from "../components/contexts/AddressContext";
import { TezosNFTType } from "../components/types/tezos/tezosNFTType";
import { Grid } from "@mui/material";
import AccCard from "../components/ui/profile/accCard";
import FetchTokenBalance from "../components/covalentAPI/fetchTokenBalance";
import { useRouter } from "next/router";
import { useQuery, useQueryClient } from "react-query";
import getUserData from "../components/axios/getUserData";
import axios from "axios";
import Profile from "../components/ui/profile/profile";
import NavBar from "../components/ui/navbar";
import SortingSelection from "../components/ui/sorting/sortingSelection";

const User: NextPage = () => {
  const { chain_id, setChain_id, address, setAddress } =
    useContext(AddressContext);

  const [nftBaseData, setNftBaseData] = useState<NFTBaseType>();
  const [nftItemsData, setNftItemsData] = useState<NFTItemsType[]>();
  const [nftData, setNftData] = useState<NFTDataType[]>();

  const router = useRouter();
  const { username } = router.query;

  const queryClient = useQueryClient();
  const { data, status, error } = useQuery(
    "user",
    async () => await getUserData(username),
    {
      enabled: !!username,
    }
  );

  function userSelector() {
    // setAddress!(user);
    if (data) {
      FetchTokenBalance(data.wallets[0].chainId, data.wallets[0].address)
        .then((nftData: any) => {
          // setNftBaseData!(null);
          setNftBaseData!(nftData);
        })
        .catch((err) => {});
    }
  }

  const {
    data: NFTCards,
    status: NFTStatus,
    error: NFTError,
  } = useQuery("nftCards", async () => await userSelector(), {
    enabled: !!data,
  });

  if (NFTStatus === "loading") {
    return <span>Loading...</span>;
  }

  return (
    <div className={styles.container}>
      {/* <Script src="https://unpkg.com/moralis/dist/moralis.js"></Script> */}
      <NFTBaseContext.Provider
        value={{
          nftBaseData,
          setNftBaseData,
          nftItemsData,
          setNftItemsData,
          nftData,
          setNftData,
        }}
      >
        <Head>
          <title>
            {data ? data.username + " - Profile | The Block" : "The Block"}
          </title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <NavBar />
        {NFTStatus === "success" ? (
          <div>
            <div style={{ marginBottom: "20rem" }}>
              <img
                className="bannercover object-cover w-full h-full"
                alt={data.username + " Cover Picture"}
                style={{ height: 381 }}
                src={data.coverPhotoUrl}
              />
              <Profile userData={data} />
            </div>

            <Grid container spacing={2}>
              <Grid item xs={12}>
                <SortingSelection />
              </Grid>
              <Grid item>{NFTCards ?? <AccCard />}</Grid>
              <Grid item xs={9}>
                {data && <NftCards></NftCards>}
              </Grid>
            </Grid>
          </div>
        ) : (
          <></>
        )}

        <footer className={styles.footer}>
          <a
            href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            Powered by{" "}
            <span className={styles.logo}>
              <Image
                src="/vercel.svg"
                alt="Vercel Logo"
                width={72}
                height={16}
              />
            </span>
          </a>
        </footer>
      </NFTBaseContext.Provider>
    </div>
  );
};

export default User;
