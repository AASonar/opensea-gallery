import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import Script from "next/script";
import { NftCards } from "../components/ui";
import AddressForm from "../components/ui/addressForm";
import { NFTBaseContext } from "../components/contexts/NFTContext";
import { useContext, useState } from "react";
import {
  NFTBaseType,
  NFTDataType,
  NFTItemsType,
} from "../components/types/nftType";
import { AddressContext } from "../components/contexts/AddressContext";
import { TezosNFTType } from "../components/types/tezos/tezosNFTType";
import { CardMedia, Grid } from "@mui/material";
import AccCard from "../components/ui/profile/accCard";
import FetchTokenBalance from "../components/covalentAPI/fetchTokenBalance";
import { useRouter } from "next/router";
import { useQuery, useQueryClient } from "react-query";
import getUserData from "../components/axios/getUserData";
import axios from "axios";
import Profile from "../components/ui/profile/profile";
import NavBar from "../components/ui/navbar";
import SortingSelection from "../components/ui/sorting/sortingSelection";
import {
  CardView,
  CardViewContext,
} from "../components/contexts/CardViewContext";
import {
  Image,
  BackgroundImage,
  Container,
  Center,
  Space,
  Group,
} from "@mantine/core";
import { Skeleton } from "@mantine/core";

const User: NextPage = () => {
  const { chain_id, setChain_id, address, setAddress } =
    useContext(AddressContext);

  const [nftBaseData, setNftBaseData] = useState<NFTBaseType>();
  const [nftItemsData, setNftItemsData] = useState<NFTItemsType[]>();
  const [nftData, setNftData] = useState<NFTDataType[]>();
  const [cardView, setCardView] = useState<CardView>();

  const router = useRouter();
  const { username, wallet = "0" } = router.query;

  const queryClient = useQueryClient();
  const {
    data: userProfile,
    status: userStatus,
    error: userError,
  } = useQuery("user", async () => await getUserData(username), {
    enabled: !!username,
  });

  function userSelector() {
    // setAddress!(user);
    if (userProfile && wallet) {
      console.log(userProfile.wallets[+wallet]);
      FetchTokenBalance(
        userProfile.wallets[+wallet].chainId,
        userProfile.wallets[+wallet].address
      )
        .then((nftData: any) => {
          // setNftBaseData!(null);
          setNftBaseData!(nftData);
        })
        .catch((err) => {});
    }
  }

  const {
    data: NFTCards,
    status: NFTStatus,
    error: NFTError,
  } = useQuery("nftCards", async () => await userSelector(), {
    enabled: !!userProfile,
  });

  if (userStatus === "error") {
    return <span>Error:User not found</span>;
  }
  return (
    <div className={styles.container}>
      {/* <Script src="https://unpkg.com/moralis/dist/moralis.js"></Script> */}
      <CardViewContext.Provider value={{ cardView, setCardView }}>
        <NFTBaseContext.Provider
          value={{
            nftBaseData,
            setNftBaseData,
            nftItemsData,
            setNftItemsData,
            nftData,
            setNftData,
          }}
        >
          <Head>
            <title>
              {userProfile
                ? userProfile.username + " | The Block"
                : "The Block"}
            </title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>

          <NavBar />

          {userStatus === "loading" ? (
            <div>
              <Skeleton>sds</Skeleton>
            </div>
          ) : (
            <></>
          )}
          {userStatus === "success" ? (
            <div>
              <div style={{ marginBottom: "17rem" }}>
                <BackgroundImage
                  className="bannercover object-cover w-full h-full"
                  style={{ height: 381 }}
                  src={userProfile?.coverPhotoUrl ?? ""}
                />
                <Center>
                  <Profile userData={userProfile} wallet={wallet} />
                </Center>
              </div>

              <Center>
                <SortingSelection />
              </Center>
              <Space h="md" />
              {/* {<AccCard />} */}
              {NFTStatus === "loading" ? <Skeleton> nice</Skeleton> : <></>}

              {NFTStatus === "success" ? (
                <Container size="xl">{NftCards && <NftCards />}</Container>
              ) : (
                <></>
              )}
            </div>
          ) : (
            <></>
          )}

          <footer className={styles.footer}>
            <a
              href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
              target="_blank"
              rel="noopener noreferrer"
            >
              Powered by{" "}
              <span className={styles.logo}>
                <Image
                  src="/vercel.svg"
                  alt="Vercel Logo"
                  width={72}
                  height={16}
                />
              </span>
            </a>
          </footer>
        </NFTBaseContext.Provider>
      </CardViewContext.Provider>
    </div>
  );
};

export default User;
